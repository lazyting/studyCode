/**
 * 建造者模式
 * 定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示（个人理解：表示-对象，构建过程-new Xxx().setter的过程）
 * 主要作用：在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。
 * 如何使用：用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）
 * 解决的问题：
 * （1）、方便用户创建复杂的对象（不需要知道实现过程）
 * （2）、代码复用性 & 封装性（将对象构建过程和细节进行封装 & 复用）
 * 注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序，一般用来创建更为复杂的对象
 * <p>
 * 1,通过Client、Director、Builder和Product形成的建造者模式
 * 抽象建造者（_1_builder）：描述具体建造者的公共接口，一般用来定义建造细节的方法，并不涉及具体的对象部件的创建。
 * 具体建造者（ConcreteBuilder）：描述具体建造者，并实现抽象建造者公共接口。
 * 指挥者（Director）：调用具体建造者来创建复杂对象（产品）的各个部分，并按照一定顺序（流程）来建造复杂对象。
 * 产品（Product）：描述一个由一系列部件组成较为复杂的对象。
 * <p>
 * （1）优点
 * 1、产品的建造和表示分离，实现了解耦。
 * 2、将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰
 * 3、增加新的具体建造者无需修改原有类库的代码，易于拓展，符合“开闭原则”。
 * （2）缺点
 * 1、产品必须有共同点，限制了使用范围。
 * 2、如内部变化复杂，会有很多的建造类，难以维护。
 */
package code.pattern._1_builder;
