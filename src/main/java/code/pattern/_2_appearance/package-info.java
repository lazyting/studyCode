/**
 * 外观模式
 * 优点：
 * 1,它对客户端屏蔽了子系统的组件（可以直接调用外观模式），减少了系统的耦合度，使客户端所需要调用的所处理的类的数目减少。
 * 2,它实现了系统与客户端之间的松耦合关系，子系统的修改不会影响客户端代码，只要修改外观模式就好。
 * 3,一个子系统的修改该对其它子系统没有任何影响，而且子系统内部变化也不会影响到外观模式。
 * 缺点：
 * 1,并不能限制客户端直接调用子系统，如果客户端对子系统类作太多限制则减少了可变形和灵活性。
 * 2,如果设计不当，增加新的子系统就可能修改外观类的源代码，不符合开闭原则。
 * <p>
 * 使用场景：
 * 1、当客户端需要调用一系列复杂子系统时候，可以提供一个简单入口的时候使用外观模式。
 * 2、客户端与子系统有很大的耦合性，使用外观模式可以充分解耦。
 * 3、再层次化结构中可以使用外观模式的定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，减低层与层之间的耦合。
 * <p>
 * 个人理解：
 * springmvc的controller和service层即可立即为外观模式
 * 最理想的controller层是接收传入的参数，然后只需要返回需要的结果即可，不需要做处理。
 * 其余的事情都交给service层处理，service层提供一个方法，供controller层调用即可
 */
package code.pattern._2_appearance;