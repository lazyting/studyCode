/**
 * 享元模式
 * 优点：
 * 1，节约系统的开销。保证一个常用的对象只有一个！
 * 2，外部状态不会影响内部状态，可以在不同环境下进行共享哦。
 * <p>
 * 缺点：
 * 1，享元模式使逻辑变得更加复杂，需要将享元对象分出内部状态和外部状态。
 * 2，并且为了使对象可以共享，外部状态在很多情况下是必须有的，比如围棋的位置。当读取外部状态时明显会增加运行时间。
 * <p>
 * 使用场景：
 * 1，一个系统有大量细粒度化的对象，占据大量的内存。
 * 2，对象大部分属性可以外部化，并且能将外部的属性放入内部属性中来。
 * 3，使用享元模式需要维护享元池，所以要用那种常用的经常调用的对象可以使用享元模式。
 */
package code.pattern._2_shareYuan;